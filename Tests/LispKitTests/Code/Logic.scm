;;; Logic.scm
;;; Regression test data
;;;
;;; This test suite is based on the miniKanren test suite from William Byrd.
;;;
;;; Author: Matthias Zenger
;;; Copyright Â© 2018 ObjectHub. All rights reserved.
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;      http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

(
  "Logic =="
  ()
  (import (lispkit logic))
  (define failures '())
  (define-syntax test
    (syntax-rules ()
      ((_ name expression value)
         (let ((result expression))
           (if (not (equal? value result))
               (set! failures (cons (list name (quote expression) result) failures)))))))
  (test "== 1" (run 1 (q) (== 5 q)) '(5))
  (test "== 2" (run* (q) (conde ((== 5 q)) ((== 6 q)))) '(5 6))
  (test "== 3" (run* (q) (fresh (a d) (conde ((== 5 a)) ((== 6 d))) (== `(,a . ,d) q)))
            '((5 . _.0) (_.0 . 6)))
  (define appendo
    (lambda (l s out)
      (conde ((== '() l) (== s out))
             ((fresh (a d res)
                (== `(,a . ,d) l)
                (== `(,a . ,res) out)
                (appendo d s res))))))
  (test "== 4" (run* (q) (appendo '(a b c) '(d e) q)) '((a b c d e)))
  (test "== 5" (run* (q) (appendo q '(d e) '(a b c d e))) '((a b c)))
  (test "== 6" (run* (q) (appendo '(a b c) q '(a b c d e))) '((d e)))
  (test "== 7" (run 5 (q) (fresh (l s out) (appendo l s out) (== `(,l ,s ,out) q)))
               '((() _.0 _.0)
                 ((_.0) _.1 (_.0 . _.1))
                 ((_.0 _.1) _.2 (_.0 _.1 . _.2))
                 ((_.0 _.1 _.2) _.3 (_.0 _.1 _.2 . _.3))
                 ((_.0 _.1 _.2 _.3) _.4 (_.0 _.1 _.2 _.3 . _.4))))
  failures
)

(
  "Logic symbolo"
  ()
  (set! failures '())
  (test "symbolo-1" (run* (q) (symbolo q)) '((_.0 (sym _.0))))
  (test "symbolo-2" (run* (q) (symbolo q) (== 'x q)) '(x))
  (test "symbolo-3" (run* (q) (== 'x q) (symbolo q)) '(x))
  (test "symbolo-4" (run* (q) (== 5 q) (symbolo q)) '())
  (test "symbolo-5" (run* (q) (symbolo q) (== 5 q)) '())
  (test "symbolo-6" (run* (q) (symbolo q) (== `(1 . 2) q)) '())
  (test "symbolo-7" (run* (q) (== `(1 . 2) q) (symbolo q)) '())
  (test "symbolo-8" (run* (q) (fresh (x) (symbolo x))) '(_.0))
  (test "symbolo-9" (run* (q) (fresh (x) (symbolo x))) '(_.0))
  (test "symbolo-10" (run* (q) (fresh (x) (symbolo x) (== x q))) '((_.0 (sym _.0))))
  (test "symbolo-11" (run* (q) (fresh (x) (symbolo q) (== x q) (symbolo x)))
                   '((_.0 (sym _.0))))
  (test "symbolo-12" (run* (q) (fresh (x) (symbolo q) (symbolo x) (== x q)))
                     '((_.0 (sym _.0))))
  (test "symbolo-13" (run* (q) (fresh (x) (== x q) (symbolo q) (symbolo x)))
                     '((_.0 (sym _.0))))
  (test "symbolo-14-a" (run* (q) (fresh (x) (symbolo q) (== 'y x)))
                       '((_.0 (sym _.0))))
  (test "symbolo-14-b" (run* (q) (fresh (x) (symbolo q) (== 'y x) (== x q)))
                       '(y))
  (test "symbolo-15" (run* (q) (fresh (x) (== q x) (symbolo q) (== 5 x)))
                     '())
  (test "symbolo-16-a" (run* (q) (symbolo q) (=/= 5 q))
                     '((_.0 (sym _.0))))
  (test "symbolo-16-b" (run* (q) (=/= 5 q) (symbolo q))
                     '((_.0 (sym _.0))))
  (test "symbolo-17" (run* (q) (symbolo q) (=/= `(1 . 2) q))
                     '((_.0 (sym _.0))))
  (test "symbolo-18" (run* (q) (symbolo q) (=/= 'y q))
                     '((_.0 (=/= ((_.0 y))) (sym _.0))))
  (test "symbolo-19" (run* (q) (fresh (x y) (symbolo x) (symbolo y) (== `(,x ,y) q)))
                   '(((_.0 _.1) (sym _.0 _.1))))
  (test "symbolo-20" (run* (q) (fresh (x y) (== `(,x ,y) q) (symbolo x) (symbolo y)))
                     '(((_.0 _.1) (sym _.0 _.1))))
  (test "symbolo-21" (run* (q) (fresh (x y) (== `(,x ,y) q) (symbolo x) (symbolo x)))
                     '(((_.0 _.1) (sym _.0))))
  (test "symbolo-22" (run* (q) (fresh (x y) (symbolo x) (symbolo x) (== `(,x ,y) q)))
                     '(((_.0 _.1) (sym _.0))))
  (test "symbolo-23" (run* (q) (fresh (x y) (symbolo x) (== `(,x ,y) q) (symbolo x)))
                     '(((_.0 _.1) (sym _.0))))
  (test "symbolo-24-a" (run* (q) (fresh (w x y z) (=/= `(,w . ,x) `(,y . ,z))
                                   (symbolo w) (symbolo z)))
                       '(_.0))
  (test "symbolo-24-b" (run* (q) (fresh (w x y z) (=/= `(,w . ,x) `(,y . ,z))
                                   (symbolo w) (symbolo z) (== `(,w ,x ,y ,z) q)))
                       '(((_.0 _.1 _.2 _.3) (=/= ((_.0 _.2) (_.1 _.3))) (sym _.0 _.3))))
  (test "symbolo-24-c" (run* (q) (fresh (w x y z) (=/= `(,w . ,x) `(,y . ,z))
                                   (symbolo w) (symbolo y) (== `(,w ,x ,y ,z) q)))
                       '(((_.0 _.1 _.2 _.3) (=/= ((_.0 _.2) (_.1 _.3))) (sym _.0 _.2))))
  (test "symbolo-24-d" (run* (q) (fresh (w x y z) (=/= `(,w . ,x) `(,y . ,z))
                                   (symbolo w) (symbolo y) (== w y) (== `(,w ,x ,y ,z) q)))
                       '(((_.0 _.1 _.0 _.2) (=/= ((_.1 _.2))) (sym _.0))))
  (test "symbolo-25" (run* (q) (fresh (w x) (=/= `(,w . ,x) `(5 . 6)) (== `(,w ,x) q)))
                     '(((_.0 _.1) (=/= ((_.0 5) (_.1 6))))))
  (test "symbolo-26" (run* (q) (fresh (w x) (=/= `(,w . ,x) `(5 . 6))
                                 (symbolo w) (== `(,w ,x) q)))
                     '(((_.0 _.1) (sym _.0))))
  (test "symbolo-27" (run* (q) (fresh (w x) (symbolo w) (=/= `(,w . ,x) `(5 . 6))
                                 (== `(,w ,x) q)))
                     '(((_.0 _.1) (sym _.0))))
  (test "symbolo-28" (run* (q) (fresh (w x) (symbolo w) (=/= `(5 . 6) `(,w . ,x))
                                 (== `(,w ,x) q)))
                     '(((_.0 _.1) (sym _.0))))
  (test "symbolo-29" (run* (q) (fresh (w x) (symbolo w) (=/= `(5 . ,x) `(,w . 6))
                                 (== `(,w ,x) q)))
                     '(((_.0 _.1) (sym _.0))))
  (test "symbolo-30" (run* (q) (fresh (w x) (symbolo w) (=/= `(z . ,x) `(,w . 6))
                                 (== `(,w ,x) q)))
                     '(((_.0 _.1) (=/= ((_.0 z) (_.1 6))) (sym _.0))))
  (test "symbolo-31-a" (run* (q) (fresh (w x y z) (== x 5) (=/= `(,w ,y) `(,x ,z))
                                   (== w 5) (== `(,w ,x ,y ,z) q)))
                     '(((5 5 _.0 _.1) (=/= ((_.0 _.1))))))
  (test "symbolo-31-b" (run* (q) (fresh (w x y z) (=/= `(,w ,y) `(,x ,z))
                                   (== w 5) (== x 5) (== `(,w ,x ,y ,z) q)))
                     '(((5 5 _.0 _.1) (=/= ((_.0 _.1))))))
  (test "symbolo-31-c" (run* (q) (fresh (w x y z) (== w 5) (=/= `(,w ,y) `(,x ,z))
                                   (== `(,w ,x ,y ,z) q) (== x 5)))
                     '(((5 5 _.0 _.1) (=/= ((_.0 _.1))))))
  (test "symbolo-31-d" (run* (q) (fresh (w x y z) (== w 5) (== x 5)
                                   (=/= `(,w ,y) `(,x ,z)) (== `(,w ,x ,y ,z) q)))
                     '(((5 5 _.0 _.1) (=/= ((_.0 _.1))))))
  (test "symbolo-32-a" (run* (q) (fresh (w x y z) (== x 'a) (=/= `(,w ,y) `(,x ,z))
                                   (== w 'a) (== `(,w ,x ,y ,z) q)))
                     '(((a a _.0 _.1) (=/= ((_.0 _.1))))))
  (test "symbolo-32-b" (run* (q) (fresh (w x y z) (=/= `(,w ,y) `(,x ,z))
                                   (== w 'a) (== x 'a) (== `(,w ,x ,y ,z) q)))
                     '(((a a _.0 _.1) (=/= ((_.0 _.1))))))
  (test "symbolo-32-c" (run* (q) (fresh (w x y z) (== w 'a) (=/= `(,w ,y) `(,x ,z))
                                   (== `(,w ,x ,y ,z) q) (== x 'a)))
                     '(((a a _.0 _.1) (=/= ((_.0 _.1))))))
  (test "symbolo-32-d" (run* (q) (fresh (w x y z) (== w 'a) (== x 'a)
                                   (=/= `(,w ,y) `(,x ,z)) (== `(,w ,x ,y ,z) q)))
                     '(((a a _.0 _.1) (=/= ((_.0 _.1))))))
  failures
)

(
  "Logic numbero"
  ()
  (set! failures '())
  (test "numbero-1" (run* (q) (numbero q)) '((_.0 (num _.0))))
  (test "numbero-2" (run* (q) (numbero q) (== 5 q)) '(5))
  (test "numbero-3" (run* (q) (== 5 q) (numbero q)) '(5))
  (test "numbero-4" (run* (q) (== 'x q) (numbero q)) '())
  (test "numbero-5" (run* (q) (numbero q) (== 'x q)) '())
  (test "numbero-6" (run* (q) (numbero q) (== `(1 . 2) q)) '())
  (test "numbero-7" (run* (q) (== `(1 . 2) q) (numbero q)) '())
  (test "numbero-8" (run* (q) (fresh (x) (numbero x))) '(_.0))
  (test "numbero-9" (run* (q) (fresh (x) (numbero x))) '(_.0))
  (test "numbero-10" (run* (q) (fresh (x) (numbero x) (== x q))) '((_.0 (num _.0))))
  (test "numbero-11" (run* (q) (fresh (x) (numbero q) (== x q) (numbero x)))
                     '((_.0 (num _.0))))
  (test "numbero-12" (run* (q) (fresh (x) (numbero q) (numbero x) (== x q)))
                     '((_.0 (num _.0))))
  (test "numbero-13" (run* (q) (fresh (x) (== x q) (numbero q) (numbero x)))
                     '((_.0 (num _.0))))
  (test "numbero-14-a" (run* (q) (fresh (x) (numbero q) (== 5 x)))
                     '((_.0 (num _.0))))
  (test "numbero-14-b" (run* (q) (fresh (x) (numbero q) (== 5 x) (== x q))) '(5))
  (test "numbero-15" (run* (q) (fresh (x) (== q x) (numbero q) (== 'y x))) '())
  (test "numbero-16-a" (run* (q) (numbero q) (=/= 'y q)) '((_.0 (num _.0))))
  (test "numbero-16-b" (run* (q) (=/= 'y q) (numbero q)) '((_.0 (num _.0))))
  (test "numbero-17" (run* (q) (numbero q) (=/= `(1 . 2) q)) '((_.0 (num _.0))))
  (test "numbero-18" (run* (q) (numbero q) (=/= 5 q))
                     '((_.0 (=/= ((_.0 5))) (num _.0))))
  (test "numbero-19" (run* (q) (fresh (x y) (numbero x) (numbero y) (== `(,x ,y) q)))
                     '(((_.0 _.1) (num _.0 _.1))))
  (test "numbero-20" (run* (q) (fresh (x y) (== `(,x ,y) q) (numbero x) (numbero y)))
                     '(((_.0 _.1) (num _.0 _.1))))
  (test "numbero-21" (run* (q) (fresh (x y) (== `(,x ,y) q) (numbero x) (numbero x)))
                     '(((_.0 _.1) (num _.0))))
  (test "numbero-22" (run* (q) (fresh (x y) (numbero x) (numbero x) (== `(,x ,y) q)))
                     '(((_.0 _.1) (num _.0))))
  (test "numbero-23" (run* (q) (fresh (x y) (numbero x) (== `(,x ,y) q) (numbero x)))
                     '(((_.0 _.1) (num _.0))))
  (test "numbero-24-a" (run* (q) (fresh (w x y z) (=/= `(,w . ,x) `(,y . ,z))
                                   (numbero w) (numbero z)))
                     '(_.0))
  (test "numbero-24-b" (run* (q) (fresh (w x y z) (=/= `(,w . ,x) `(,y . ,z))
                                   (numbero w) (numbero z) (== `(,w ,x ,y ,z) q)))
                     '(((_.0 _.1 _.2 _.3) (=/= ((_.0 _.2) (_.1 _.3))) (num _.0 _.3))))
  (test "numbero-24-c" (run* (q) (fresh (w x y z) (=/= `(,w . ,x) `(,y . ,z))
                                   (numbero w) (numbero y) (== `(,w ,x ,y ,z) q)))
                     '(((_.0 _.1 _.2 _.3) (=/= ((_.0 _.2) (_.1 _.3))) (num _.0 _.2))))
  (test "numbero-24-d" (run* (q) (fresh (w x y z) (=/= `(,w . ,x) `(,y . ,z))
                               (numbero w) (numbero y) (== w y) (== `(,w ,x ,y ,z) q)))
                     '(((_.0 _.1 _.0 _.2) (=/= ((_.1 _.2))) (num _.0))))
  (test "numbero-25" (run* (q) (fresh (w x) (=/= `(,w . ,x) `(a . b)) (== `(,w ,x) q)))
                     '(((_.0 _.1) (=/= ((_.0 a) (_.1 b))))))
  (test "numbero-26" (run* (q) (fresh (w x) (=/= `(,w . ,x) `(a . b)) (numbero w)
                                 (== `(,w ,x) q)))
                     '(((_.0 _.1) (num _.0))))
  (test "numbero-27" (run* (q) (fresh (w x) (numbero w) (=/= `(,w . ,x) `(a . b))
                                 (== `(,w ,x) q)))
                     '(((_.0 _.1) (num _.0))))
  (test "numbero-28" (run* (q) (fresh (w x) (numbero w) (=/= `(a . b) `(,w . ,x))
                                 (== `(,w ,x) q)))
                     '(((_.0 _.1) (num _.0))))
  (test "numbero-29" (run* (q) (fresh (w x) (numbero w) (=/= `(a . ,x) `(,w . b))
                                 (== `(,w ,x) q)))
                     '(((_.0 _.1) (num _.0))))
  (test "numbero-30" (run* (q) (fresh (w x) (numbero w) (=/= `(5 . ,x) `(,w . b))
                                 (== `(,w ,x) q)))
                     '(((_.0 _.1) (=/= ((_.0 5) (_.1 b))) (num _.0))))
  (test "numbero-31" (run* (q) (fresh (x y z a b) (numbero x) (numbero y)
                                 (numbero z) (numbero a) (numbero b)
                                 (== `(,y ,z ,x ,b) `(,z ,x ,y ,a))
                                 (== q `(,x ,y ,z ,a ,b))))
                     '(((_.0 _.0 _.0 _.1 _.1) (num _.0 _.1))))
  (test "numbero-32" (run* (q) (fresh (x y z a b) (== q `(,x ,y ,z ,a ,b))
                                 (== `(,y ,z ,x ,b) `(,z ,x ,y ,a)) (numbero x)
                                 (numbero a)))
                     '(((_.0 _.0 _.0 _.1 _.1) (num _.0 _.1))))
  failures
)

(
  "Logic symbolo numbero"
  ()
  (set! failures '())
  (test "symbolo-numbero-1" (run* (q) (symbolo q) (numbero q)) '())
  (test "symbolo-numbero-2" (run* (q) (numbero q) (symbolo q)) '())
  (test "symbolo-numbero-3" (run* (q) (fresh (x) (numbero x) (symbolo x))) '())
  (test "symbolo-numbero-4" (run* (q) (fresh (x) (symbolo x) (numbero x))) '())
  (test "symbolo-numbero-5" (run* (q) (numbero q) (fresh (x) (symbolo x) (== x q))) '())
  (test "symbolo-numbero-6" (run* (q) (symbolo q) (fresh (x) (numbero x) (== x q))) '())
  (test "symbolo-numbero-7" (run* (q) (fresh (x) (numbero x) (== x q)) (symbolo q)) '())
  (test "symbolo-numbero-7" (run* (q) (fresh (x) (symbolo x) (== x q)) (numbero q)) '())
  (test "symbolo-numbero-8" (run* (q) (fresh (x) (== x q) (symbolo x)) (numbero q)) '())
  (test "symbolo-numbero-9" (run* (q) (fresh (x) (== x q) (numbero x)) (symbolo q)) '())
  (test "symbolo-numbero-10" (run* (q) (symbolo q) (fresh (x) (numbero x)))
    '((_.0 (sym _.0))))
  (test "symbolo-numbero-11" (run* (q) (numbero q) (fresh (x) (symbolo x)))
    '((_.0 (num _.0))))
  (test "symbolo-numbero-12" (run* (q) (fresh (x y) (symbolo x) (== `(,x ,y) q)))
    '(((_.0 _.1) (sym _.0))))
  (test "symbolo-numbero-13" (run* (q) (fresh (x y) (numbero x) (== `(,x ,y) q)))
    '(((_.0 _.1) (num _.0))))
  (test "symbolo-numbero-14" (run* (q) (fresh (x y) (numbero x) (symbolo y)
    (== `(,x ,y) q))) '(((_.0 _.1) (num _.0) (sym _.1))))
  (test "symbolo-numbero-15" (run* (q) (fresh (x y) (numbero x)
    (== `(,x ,y) q) (symbolo y))) '(((_.0 _.1) (num _.0) (sym _.1))))
  (test "symbolo-numbero-16" (run* (q) (fresh (x y)
    (== `(,x ,y) q) (numbero x) (symbolo y))) '(((_.0 _.1) (num _.0) (sym _.1))))
  (test "symbolo-numbero-17" (run* (q) (fresh (x y) (== `(,x ,y) q)
    (numbero x) (symbolo y)) (fresh (w z) (== `(,w ,z) q)))
    '(((_.0 _.1) (num _.0) (sym _.1))))
  (test "symbolo-numbero-18" (run* (q) (fresh (x y) (== `(,x ,y) q)
    (numbero x) (symbolo y)) (fresh (w z) (== `(,w ,z) q) (== w 5)))
    '(((5 _.0) (sym _.0))))
  (test "symbolo-numbero-19" (run* (q) (fresh (x y) (== `(,x ,y) q)
    (numbero x) (symbolo y)) (fresh (w z) (== 'a z) (== `(,w ,z) q)))
    '(((_.0 a) (num _.0))))
  (test "symbolo-numbero-20" (run* (q) (fresh (x y) (== `(,x ,y) q)
    (numbero x) (symbolo y)) (fresh (w z) (== `(,w ,z) q) (== 'a z)))
    '(((_.0 a) (num _.0))))
  (test "symbolo-numbero-21" (run* (q) (fresh (x y) (== `(,x ,y) q) (=/= `(5 a) q)))
    '(((_.0 _.1) (=/= ((_.0 5) (_.1 a))))))
  (test "symbolo-numbero-22" (run* (q) (fresh (x y) (== `(,x ,y) q) (=/= `(5 a) q)
    (symbolo x))) '(((_.0 _.1) (sym _.0))))
  (test "symbolo-numbero-23" (run* (q) (fresh (x y) (== `(,x ,y) q) (symbolo x)
    (=/= `(5 a) q))) '(((_.0 _.1) (sym _.0))))
  (test "symbolo-numbero-24" (run* (q) (fresh (x y) (symbolo x) (== `(,x ,y) q)
    (=/= `(5 a) q))) '(((_.0 _.1) (sym _.0))))
  (test "symbolo-numbero-25" (run* (q) (fresh (x y) (=/= `(5 a) q) (symbolo x)
    (== `(,x ,y) q))) '(((_.0 _.1) (sym _.0))))
  (test "symbolo-numbero-26" (run* (q) (fresh (x y) (=/= `(5 a) q) (== `(,x ,y) q)
    (symbolo x))) '(((_.0 _.1) (sym _.0))))
  (test "symbolo-numbero-27" (run* (q) (fresh (x y) (== `(,x ,y) q) (=/= `(5 a) q)
    (numbero y))) '(((_.0 _.1) (num _.1))))
  (test "symbolo-numbero-28" (run* (q) (fresh (x y) (== `(,x ,y) q) (numbero y)
    (=/= `(5 a) q))) '(((_.0 _.1) (num _.1))))
  (test "symbolo-numbero-29" (run* (q) (fresh (x y) (numbero y) (== `(,x ,y) q)
    (=/= `(5 a) q))) '(((_.0 _.1) (num _.1))))
  (test "symbolo-numbero-30" (run* (q) (fresh (x y) (=/= `(5 a) q) (numbero y)
    (== `(,x ,y) q))) '(((_.0 _.1) (num _.1))))
  (test "symbolo-numbero-31" (run* (q) (fresh (x y) (=/= `(5 a) q) (== `(,x ,y) q)
    (numbero y))) '(((_.0 _.1) (num _.1))))
  (test "symbolo-numbero-32" (run* (q) (fresh (x y) (=/= `(,x ,y) q) (numbero x)
    (symbolo y))) '(_.0))
  (test "symbolo-numbero-33" (run* (q) (fresh (x y) (numbero x) (=/= `(,x ,y) q)
    (symbolo y))) '(_.0))
  (test "symbolo-numbero-34" (run* (q) (fresh (x y) (numbero x) (symbolo y)
    (=/= `(,x ,y) q))) '(_.0))
  failures
)

(
  "Logic disequality"
  ()
  (set! failures '())
  (test "=/=-0" (run* (q) (=/= 5 q)) '((_.0 (=/= ((_.0 5))))))
  (test "=/=-1" (run* (q) (=/= 3 q) (== q 3)) '())
  (test "=/=-2" (run* (q) (== q 3) (=/= 3 q)) '())
  (test "=/=-3" (run* (q) (fresh (x y) (=/= x y) (== x y))) '())
  (test "=/=-4" (run* (q) (fresh (x y) (== x y) (=/= x y))) '())
  (test "=/=-5" (run* (q) (fresh (x y) (=/= x y) (== 3 x) (== 3 y))) '())
  (test "=/=-6" (run* (q) (fresh (x y) (== 3 x) (=/= x y) (== 3 y))) '())
  (test "=/=-7" (run* (q) (fresh (x y) (== 3 x) (== 3 y) (=/= x y))) '())
  (test "=/=-8" (run* (q) (fresh (x y) (== 3 x) (== 3 y) (=/= y x))) '())
  (test "=/=-9" (run* (q) (fresh (x y z) (== x y) (== y z) (=/= x 4) (== z (+ 2 2)))) '())
  (test "=/=-10" (run* (q) (fresh (x y z) (== x y) (== y z) (== z (+ 2 2)) (=/= x 4))) '())
  (test "=/=-11" (run* (q) (fresh (x y z) (=/= x 4) (== y z) (== x y) (== z (+ 2 2)))) '())
  (test "=/=-12" (run* (q) (fresh (x y z) (=/= x y) (== x `(0 ,z 1)) (== y `(0 1 1)))) '(_.0))
  (test "=/=-13" (run* (q) (fresh (x y z) (=/= x y) (== x `(0 ,z 1)) (== y `(0 1 1))
    (== z 1) (== `(,x ,y) q))) '())
  (test "=/=-14" (run* (q) (fresh (x y z) (=/= x y) (== x `(0 ,z 1)) (== y `(0 1 1))
    (== z 0))) '(_.0))
  (test "=/=-15" (run* (q) (fresh (x y z) (== z 0) (=/= x y) (== x `(0 ,z 1))
    (== y `(0 1 1)))) '(_.0))
  (test "=/=-16" (run* (q) (fresh (x y z) (== x `(0 ,z 1)) (== y `(0 1 1))
    (=/= x y))) '(_.0))
  (test "=/=-17" (run* (q) (fresh (x y z) (== z 1) (=/= x y) (== x `(0 ,z 1))
    (== y `(0 1 1)))) '())
  (test "=/=-18" (run* (q) (fresh (x y z) (== z 1) (== x `(0 ,z 1)) (== y `(0 1 1))
    (=/= x y))) '())
  (test "=/=-19" (run* (q) (fresh (x y) (=/= `(,x 1) `(2 ,y)) (== x 2))) '(_.0))
  (test "=/=-20" (run* (q) (fresh (x y) (=/= `(,x 1) `(2 ,y)) (== y 1))) '(_.0))
  (test "=/=-21" (run* (q) (fresh (x y) (=/= `(,x 1) `(2 ,y)) (== x 2) (== y 1))) '())
  (test "=/=-22" (run* (q) (fresh (x y) (=/= `(,x 1) `(2 ,y)) (== `(,x ,y) q)))
    '(((_.0 _.1) (=/= ((_.0 2) (_.1 1))))))
  (test "=/=-23" (run* (q) (fresh (x y) (=/= `(,x 1) `(2 ,y)) (== x 2) (== `(,x ,y) q)))
    '(((2 _.0) (=/= ((_.0 1))))))
  (test "=/=-24" (run* (q) (fresh (x y) (=/= `(,x 1) `(2 ,y)) (== x 2) (== y 9)
    (== `(,x ,y) q))) '((2 9)))
  (test "=/=-24b" (run* (q) (fresh (a d) (== `(,a . ,d) q) (=/= q `(5 . 6)) (== a 5)
    (== d 6))) '())
  (test "=/=-25" (run* (q) (fresh (x y) (=/= `(,x 1) `(2 ,y)) (== x 2) (== y 1)
    (== `(,x ,y) q))) '())
  (test "=/=-26" (run* (q) (fresh (a x z) (=/= a `(,x 1)) (== a `(,z 1)) (== x z))) '())
  (test "=/=-27" (run* (q) (fresh (a x z) (=/= a `(,x 1)) (== a `(,z 1)) (== x 5)
    (== `(,x ,z) q))) '(((5 _.0) (=/= ((_.0 5))))))
  (test "=/=-28" (run* (q) (=/= 3 4)) '(_.0))
  (test "=/=-29" (run* (q) (=/= 3 3)) '())
  (test "=/=-30" (run* (q) (=/= 5 q) (=/= 6 q) (== q 5)) '())
  (test "=/=-31" (run* (q) (fresh (a d) (== `(,a . ,d) q) (=/= q `(5 . 6)) (== a 5)))
    '(((5 . _.0) (=/= ((_.0 6))))))
  (test "=/=-32" (run* (q) (fresh (a) (== 3 a) (=/= a 4))) '(_.0))
  (test "=/=-33" (run* (q) (=/= 4 q) (=/= 3 q)) '((_.0 (=/= ((_.0 3)) ((_.0 4))))))
  (test "=/=-34" (run* (q) (=/= q 5) (=/= q 5)) '((_.0 (=/= ((_.0 5))))))
  (test "=/=-35" (let ((foo (lambda (x) (fresh (a) (=/= x a)))))
    (run* (q) (fresh (a) (foo a)))) '(_.0))
  (test "=/=-36" (let ((foo (lambda (x) (fresh (a) (=/= x a)))))
    (run* (q) (fresh (b) (foo b)))) '(_.0))
  (test "=/=-37" (run* (q) (fresh (x y) (== `(,x ,y) q) (=/= x y)))
    '(((_.0 _.1) (=/= ((_.0 _.1))))))
  (test "=/=-37b" (run* (q) (fresh (a d) (== `(,a . ,d) q) (=/= q `(5 . 6))))
    '(((_.0 . _.1) (=/= ((_.0 5) (_.1 6))))))
  (test "=/=-37c" (run* (q) (fresh (a d) (== `(,a . ,d) q) (=/= q `(5 . 6)) (== a 3)))
    '((3 . _.0)))
  (test "=/=-38" (run* (q) (fresh (x y) (== `(,x ,y) q) (=/= y x)))
    '(((_.0 _.1) (=/= ((_.0 _.1))))))
  (test "=/=-39" (run* (q) (fresh (x y) (== `(,x ,y) q) (=/= x y) (=/= y x)))
    '(((_.0 _.1) (=/= ((_.0 _.1))))))
  (test "=/=-40" (run* (q) (fresh (x y) (== `(,x ,y) q) (=/= x y) (=/= x y)))
    '(((_.0 _.1) (=/= ((_.0 _.1))))))
  (test "=/=-41" (run* (q) (=/= q 5) (=/= 5 q))
    '((_.0 (=/= ((_.0 5))))))
  (test "=/=-42" (run* (q) (fresh (x y) (== `(,x ,y) q) (=/= `(,x ,y) `(5 6)) (=/= x 5)))
    '(((_.0 _.1) (=/= ((_.0 5))))))
  (test "=/=-43" (run* (q) (fresh (x y) (== `(,x ,y) q) (=/= x 5) (=/= `(,x ,y) `(5 6))))
    '(((_.0 _.1) (=/= ((_.0 5))))))
  (test "=/=-44" (run* (q) (fresh (x y) (=/= x 5) (=/= `(,x ,y) `(5 6)) (== `(,x ,y) q)))
    '(((_.0 _.1) (=/= ((_.0 5))))))
  (test "=/=-45" (run* (q) (fresh (x y) (=/= 5 x) (=/= `(,x ,y) `(5 6)) (== `(,x ,y) q)))
    '(((_.0 _.1) (=/= ((_.0 5))))))
  (test "=/=-46" (run* (q) (fresh (x y) (=/= 5 x) (=/= `( ,y ,x) `(6 5)) (== `(,x ,y) q)))
    '(((_.0 _.1) (=/= ((_.0 5))))))
  (test "=/=-47" (run* (x) (fresh (y z) (=/= x `(,y 2)) (== x `(,z 2)))) '((_.0 2)))
  (test "=/=-48" (run* (x) (fresh (y z) (=/= x `(,y 2)) (== x `((,z) 2)))) '(((_.0) 2)))
  (test "=/=-49" (run* (x) (fresh (y z) (=/= x `((,y) 2)) (== x `(,z 2)))) '((_.0 2)))
  (define (distincto l)
    (conde
      ((== l '()))
      ((fresh (a) (== l `(,a))))
      ((fresh (a ad dd)
         (== l `(,a ,ad . ,dd))
         (=/= a ad)
         (distincto `(,a . ,dd))
         (distincto `(,ad . ,dd))))))
  (test "=/=-50" (run* (q) (distincto `(2 3 ,q))) '((_.0 (=/= ((_.0 2)) ((_.0 3))))))
  (define (rembero x ls out)
    (conde
      ((== '() ls) (== '() out))
      ((fresh (a d res)
         (== `(,a . ,d) ls)
         (rembero x d res)
         (conde
           ((== a x) (== out res))
           ((== `(,a . ,res) out)))))))
  (test "=/=-51" (run* (q) (rembero 'a '(a b a c) q))
    '((b c) (b a c) (a b c) (a b a c)))
  (test "=/=-52" (run* (q) (rembero 'a '(a b c) '(a b c))) '(_.0))
  (define (rembero x ls out)
    (conde
      ((== '() ls) (== '() out))
      ((fresh (a d res)
         (== `(,a . ,d) ls)
         (rembero x d res)
         (conde
           ((== a x) (== out res))
           ((=/= a x) (== `(,a . ,res) out)))))))
  (test "=/=-53" (run* (q) (rembero 'a '(a b a c) q)) '((b c)))
  (test "=/=-54" (run* (q) (rembero 'a '(a b c) '(a b c))) '())
  (test "=/=-55" (run 1 (q) (=/= q #f)) '((_.0 (=/= ((_.0 #f))))))
  failures
)

(
  "Logic absento closure"
  ()
  (set! failures '())
  (test "absento closure-1a" (run* (q) (absento 'closure q) (== q 'closure)) '())
  (test "absento closure-1b" (run* (q) (== q 'closure) (absento 'closure q)) '())
  (test "absento closure-2a" (run* (q) (fresh (a d) (== q 'closure) (absento 'closure q))) '())
  (test "absento closure-2b" (run* (q) (fresh (a d) (absento 'closure q)
    (== q 'closure))) '())
  (test "absento closure-3a" (run* (q) (fresh (a d) (absento 'closure q)
    (== `(,a . ,d) q))) '(((_.0 . _.1) (absento (closure _.0) (closure _.1)))))
  (test "absento closure-3b" (run* (q) (fresh (a d) (== `(,a . ,d) q)
    (absento 'closure q))) '(((_.0 . _.1) (absento (closure _.0) (closure _.1)))))
  (test "absento closure-4a" (run* (q) (fresh (a d) (absento 'closure q)
    (== `(,a . ,d) q) (== 'closure a))) '())
  (test "absento closure-4b" (run* (q) (fresh (a d) (absento 'closure q)
    (== 'closure a) (== `(,a . ,d) q))) '())
  (test "absento closure-4c" (run* (q) (fresh (a d) (== 'closure a)
    (absento 'closure q) (== `(,a . ,d) q))) '())
  (test "absento closure-4d" (run* (q) (fresh (a d) (== 'closure a)
    (== `(,a . ,d) q) (absento 'closure q))) '())
  (test "absento closure-5a" (run* (q) (fresh (a d) (absento 'closure q)
    (== `(,a . ,d) q) (== 'closure d))) '())
  (test "absento closure-5b" (run* (q) (fresh (a d) (absento 'closure q)
    (== 'closure d) (== `(,a . ,d) q))) '())
  (test "absento closure-5c" (run* (q) (fresh (a d) (== 'closure d)
    (absento 'closure q) (== `(,a . ,d) q))) '())
  (test "absento closure-5d" (run* (q) (fresh (a d) (== 'closure d)
    (== `(,a . ,d) q) (absento 'closure q))) '())
  (test "absento closure-6" (run* (q) (== `(3 (closure x (x x) ((y . 7))) #t) q)
    (absento 'closure q)) '())
  failures
)

(
  "Logic absento"
  ()
  (set! failures '())
  (test "absento 0" (run* (q) (absento q q)) '())
  (test "absento 1" (run* (q) (fresh (a b c) (== a b) (absento b c) (== c b)
    (== `(,a ,b ,c) q))) '())
  (test "absento 2" (run* (q) (fresh (a) (absento q a) (absento `((,q ,q) 3 (,q ,q))
    `(,a 3 ,a)))) '(_.0))
  (test "absento 3" (run* (q) (fresh (a b) (absento q a) (absento `(3 ,a) `(,b ,a))
    (== 3 b))) '())
  (test "absento 4" (run* (q) (fresh (a b) (absento q a) (absento `(3 ,a) `(,q ,a))
    (== 3 b))) '((_.0 (=/= ((_.0 3))))))
  (test "absento 5" (run* (q) (fresh (a b) (numbero a) (numbero b) (absento '(3 3)
    `(,a ,b)) (=/= a b) (== `(,a ,b) q)))
    '(((_.0 _.1) (=/= ((_.0 _.1))) (num _.0 _.1))))
  (test "absento 6" (run* (q) (fresh (a) (absento q a) (== q a))) '())
  (test "absento 7" (run* (q) (fresh (a b c) (absento '(3 . 4) c) (== `(,a . ,b) c)
    (== q `(,a . ,b))))
    '(((_.0 . _.1) (=/= ((_.0 3) (_.1 4))) (absento ((3 . 4) _.0) ((3 . 4) _.1)))))
  (test "absento 8" (run* (q) (fresh (a b) (absento 5 a) (symbolo b) (== `(,q ,b) a)))
    '((_.0 (absento (5 _.0)))))
  (test "absento 9" (run* (q) (fresh (a b) (absento 5 a) (== `(,q ,b) a)))
    '((_.0 (absento (5 _.0)))))
  (test "absento 10" (run* (q) (fresh (a) (absento `(3 . ,a) q) (absento q `(3 . ,a))))
    '((_.0 (=/= ((_.0 3))))))
  (test "absento 11" (run* (q) (fresh (a b c d e f) (absento `(,a . ,b) q)
    (absento q `(,a . ,b)) (== `(,c . ,d) a) (== `(3 . ,e) c) (== `(,f . 4) d)))
    '((_.0 (=/= ((_.0 3)) ((_.0 4))))))
  (test "absento 12" (run* (q) (fresh (a b c) (absento `(,3 . ,a) `(,b . ,c))
    (numbero b) (== `(,a ,b ,c) q)))
    '(((_.0 _.1 _.2) (=/= ((_.0 _.2) (_.1 3))) (num _.1) (absento ((3 . _.0) _.2)))))
  (test "absento 13" (run* (q) (fresh (a b c) (== `(,a . ,b) q)
    (absento '(3 . 4) q) (numbero a) (numbero b)))
    '(((_.0 . _.1) (=/= ((_.0 3) (_.1 4))) (num _.0 _.1))))
  (test "absento 14" (run* (q) (fresh (a b) (absento '(3 . 4) `(,a . ,b))
    (== `(,a . ,b) q)))
    '(((_.0 . _.1) (=/= ((_.0 3) (_.1 4))) (absento ((3 . 4) _.0) ((3 . 4) _.1)))))
  (test "absento 15" (run* (q) (absento q `(3 . (4 . 5))))
    '((_.0 (=/= ((_.0 3)) ((_.0 4)) ((_.0 5)) ((_.0 (3 . (4 . 5))))
    ((_.0 (4 . 5)))))))
  (test "absento 16" (run* (q) (fresh (a b x) (absento a b) (symbolo a)
    (numbero x) (== x b) (== `(,a ,b) q))) '(((_.0 _.1) (num _.1) (sym _.0))))
  (test "absento 19" (run* (q) (absento 5 q) (absento 5 q))
    '((_.0 (absento (5 _.0)))))
  (test "absento 20" (run* (q) (absento 5 q) (absento 6 q))
    '((_.0 (absento (5 _.0) (6 _.0)))))
  (test "absento 21" (run* (q) (absento 5 q) (symbolo q))
    '((_.0 (sym _.0))))
  (test "absento 22" (run* (q) (numbero q) (absento 'tag q))
    '((_.0 (num _.0))))
  (test "absento 23" (run* (q) (absento 'tag q) (numbero q)) '((_.0 (num _.0))))
  (test "absento 24" (run* (q) (== 5 q) (absento 5 q)) '())
  (test "absento 25" (run* (q) (== q `(5 6)) (absento 5 q)) '())
  (test "absento 25b" (run* (q) (absento 5 q) (== q `(5 6))) '())
  (test "absento 26" (run* (q) (absento 5 q) (== 5 q)) '())
  (test "absento 27" (run* (q) (absento 'tag1 q) (absento 'tag2 q))
    '((_.0 (absento (tag1 _.0) (tag2 _.0)))))
  (test "absento 28" (run* (q) (absento 'tag q) (numbero q))
    '((_.0 (num _.0))))
  (test "absento 29" (run* (q) (fresh (a b) (absento a b) (absento b a)
    (== `(,a ,b) q) (symbolo a) (numbero b)))
    '(((_.0 _.1) (num _.1) (sym _.0))))
  (test "absento 30" (run* (q) (fresh (a b) (absento b a) (absento a b)
    (== `(,a ,b) q) (symbolo a) (symbolo b)))
    '(((_.0 _.1) (=/= ((_.0 _.1))) (sym _.0 _.1))))
  (test "absento 31" (run* (q) (fresh (a b) (absento a b) (absento b a)
    (== `(,a ,b) q))) '(((_.0 _.1) (absento (_.0 _.1) (_.1 _.0)))))
  (test "absento 32" (run* (q) (fresh (a b) (absento 5 a) (absento 5 b)
    (== `(,a . ,b) q))) '(((_.0 . _.1) (absento (5 _.0) (5 _.1)))))
  (test "absento 33" (run* (q) (fresh (a b c) (== `(,a ,b) c) (== `(,c ,c) q)
    (symbolo b) (numbero c))) '())
  (test "absento 34" (run* (q) (absento 'tag q) (symbolo q))
    '((_.0 (=/= ((_.0 tag))) (sym _.0))))
  (test "absento 35" (run* (q) (absento 5 q) (numbero q))
    '((_.0 (=/= ((_.0 5))) (num _.0))))
  (test "absento 36" (run* (q) (fresh (a) (== 5 a) (absento a q)))
    '((_.0 (absento (5 _.0)))))
  (test "absento 37" (run* (q) (fresh (a b) (absento a b) (absento b a)
    (== `(,a ,b) q) (symbolo a) (symbolo b)))
    '(((_.0 _.1) (=/= ((_.0 _.1))) (sym _.0 _.1))))
  (test "absento 38" (run* (q) (absento '() q))
    '((_.0 (absento (() _.0)))))
  (test "absento 39" (run* (q) (absento `(3 4) q))
    '((_.0 (absento ((3 4) _.0)))))
  (test "absento 40" (run* (q) (fresh (d a c) (== `(3 . ,d) q) (=/= `(,c . ,a) q)
    (== '(3 . 4) d))) '((3 3 . 4)))
  (test "absento 41" (run* (q) (fresh (a) (== `(,a . ,a) q)))
    '((_.0 . _.0)))
  (test "absento 42" (run* (q) (fresh (a b) (==  `((3 4) (5 6)) q)
    (absento `(3 4) q))) '())
  (test "absento 43" (run* (q) (absento q 3))
    '((_.0 (=/= ((_.0 3))))))
  (test "absento 44" (run* (q) (fresh (a b) (absento a b) (absento b a) (== `(,a ,b) q)))
    '(((_.0 _.1) (absento (_.0 _.1) (_.1 _.0)))))
  (test "absento 45" (run* (q) (fresh (a b) (absento `(,a . ,b) q)
    (== q `(3 . (,b . ,b))))) '((3 _.0 . _.0)))
  (test "absento 45b" (run* (q) (fresh (a b) (absento `(,a . ,b) q)
    (== q `(,a 3 . (,b . ,b)))))
    '(((_.0 3 _.1 . _.1) (=/= ((_.0 _.1))))))
  (test "absento 46" (run* (q) (fresh (a) (absento a q) (absento q a)))
    '(_.0))
  (test "absento 47" (run* (q) (fresh (a) (absento `(,a . 3) q)))
    '(_.0))
  (test "absento 48" (run* (q) (fresh (a) (absento `(,a . 3) q)))
    '(_.0))
  (test "absento 49" (run* (q) (fresh (a b c d e)
    (absento `((3 4 ,a) (4 ,b) ((,c)) ,d ,e) q))) '(_.0))
  (test "absento 50" (run* (q) (fresh (a) (absento a q) (== 5 a)))
    '((_.0 (absento (5 _.0)))))
  (test "absento 51" (run* (q) (fresh (a b c d) (== a 5) (== a b) (== b c)
    (absento d q) (== c d))) '((_.0 (absento (5 _.0)))))
  (test "absento 52" (run* (q) (fresh (a b c d) (== a b) (== b c) (absento a q)
    (== c d) (== d 5))) '((_.0 (absento (5 _.0)))))
  (test "absento 53" (run* (q) (fresh (t1 t2 a) (== `(,a . 3) t1)
    (== `(,a . (4 . 3)) t2) (== `(,t1 ,t2) q) (absento t1 t2)))
    '((((_.0 . 3) (_.0 4 . 3)) (=/= ((_.0 4))))))
  (test "absento 54" (run* (q) (fresh (a) (== `(,a . 3) q) (absento q `(,a . (4 . 3)))))
    '(((_.0 . 3) (=/= ((_.0 4))))))
  (test "absento 55" (run* (q) (fresh (a d c) (== '(3 . 4) d) (absento `(3 . 4) q)
    (== `(3 . ,d) q))) '())
  (test "absento 56" (run* (q) (fresh (a b) (absento a b) (absento b a) (== `(,a ,b) q)
    (symbolo a) (numbero b))) '(((_.0 _.1) (num _.1) (sym _.0))))
  (test "absento 57" (run* (q) (numbero q) (absento q 3))
    '((_.0 (=/= ((_.0 3))) (num _.0))))
  (test "absento 58" (run* (q) (fresh (a) (== `(,a . 3) q)
    (absento q `(,a . (4 . (,a . 3)))))) '())
  (test "absento 59" (run* (q)  (fresh (a)  (== `(,a . 3) q)
    (absento q `(,a . ((,a . 3) . (,a . 4)))))) '())
  (test "absento 60" (run* (q) (fresh (a d c) (== `(3 . ,d) q) (== '(3 . 4) d)
    (absento `(3 . 4) q))) '())
  (test "absento 61" (run* (q) (fresh (a b c) (symbolo b) (absento `(,3 . ,a)
    `(,b . ,c)) (== `(,a ,b ,c) q)))
    '(((_.0 _.1 _.2) (sym _.1) (absento ((3 . _.0) _.2)))))
  (test "absento 62" (run* (q) (fresh (a b c) (absento a b) (absento b c)
    (absento c q) (symbolo a))) '(_.0))
  (test "absento 63" (run* (q) (fresh (a b c) (=/= a b) (=/= b c) (=/= c q) (symbolo a)))
    '(_.0))
  (test "absento 64" (run* (q) (symbolo q) (== 'tag q))
    '(tag))
  (test "absento 65" (run* (q) (fresh (b) (absento '(3 4) `(,q ,b))))
    '((_.0 (absento ((3 4) _.0)))))
  (test "absento 66" (run* (q) (absento 6 5))
    '(_.0))
  (test "absento 67" (run* (q) (fresh (a b) (=/= a b) (symbolo a) (numbero b)
    (== `(,a ,b) q))) '(((_.0 _.1) (num _.1) (sym _.0))))
  (test "absento 68" (run* (q) (fresh (a b c d) (=/= `(,a ,b) `(,c ,d)) (symbolo a)
    (numbero c) (symbolo b) (numbero c) (== `(,a ,b ,c ,d) q)))
    '(((_.0 _.1 _.2 _.3) (num _.2) (sym _.0 _.1))))
  (test "absento 69" (run* (q) (fresh (a b) (=/= `(,a . 3) `(,b . 3)) (symbolo a)
    (numbero b) (== `(,a ,b) q)))
     '(((_.0 _.1) (num _.1) (sym _.0))))
  (test "absento 70" (run* (q) (fresh (a b) (absento a b) (absento b a) (== `(,a ,b) q)
    (symbolo a) (numbero b)))
    '(((_.0 _.1) (num _.1) (sym _.0))))
  (test "absento 70b" (run* (q) (fresh (a b) (symbolo a) (numbero b) (absento a b)
    (absento b a) (== `(,a ,b) q)))
    '(((_.0 _.1) (num _.1) (sym _.0))))
  (test "absento 71" (run* (q) (fresh (a b) (absento a b) (absento b a) (== `(,a ,b) q)
    (symbolo a) (symbolo b)))
    '(((_.0 _.1) (=/= ((_.0 _.1))) (sym _.0 _.1))))
  (test "absento 72" (run* (q) (fresh (a b) (absento a b) (absento b a) (== `(,a ,b) q)))
    '(((_.0 _.1) (absento (_.0 _.1) (_.1 _.0)))))
  (test "absento 73" (run* (q) (fresh (a b) (== `(,a ,b) q) (absento b a) (absento a b)
    (== a '(1 . 2))))
    '((((1 . 2) _.0) (=/= ((_.0 1)) ((_.0 2))) (absento ((1 . 2) _.0)))))
  (test "absento 74" (run* (q) (fresh (a b c) (absento a q) (absento q a)
    (== `(,b . ,c) a) (== '(1 . 2) b) (== '(3 . 4) c)))
    '((_.0 (=/= ((_.0 1)) ((_.0 2)) ((_.0 3)) ((_.0 4)) ((_.0 (1 . 2)))
     ((_.0 (3 . 4)))) (absento (((1 . 2) 3 . 4) _.0)))))
  (test "absento 75" (run* (q) (fresh (a b c d e f g) (absento a q) (absento q a)
    (== `(,b . ,c) a) (== `(,d . ,e) b) (== `(,f . ,g) c) (== '(1 . 2) d)
    (== '(3 . 4) e) (== '(5 . 6) f) (== '(7 . 8) g)))
    '((_.0 (=/= ((_.0 ((1 . 2) 3 . 4))) ((_.0 ((5 . 6) 7 . 8))) ((_.0 1)) ((_.0 2))
     ((_.0 3)) ((_.0 4)) ((_.0 5)) ((_.0 6)) ((_.0 7)) ((_.0 8)) ((_.0 (1 . 2)))
     ((_.0 (3 . 4))) ((_.0 (5 . 6))) ((_.0 (7 . 8)))) (absento ((((1 . 2) 3 . 4)
     (5 . 6) 7 . 8) _.0)))))
  (test "absento 76" (run* (q) (absento 3 q) (absento '(3 4) q))
     '((_.0 (absento (3 _.0)))))
  (test "absento 77" (run* (q) (fresh (x a b) (== x `(,a ,b)) (absento '(3 4) x)
    (absento 3 a) (absento 4 b) (== q `(,a 2))))
    '(((_.0 2) (absento (3 _.0)))))
  (test "absento 78" (run* (q) (fresh (d) (== `(3 . ,d) q) (absento `(3 . 4) q)
    (== '(3 . 4) d))) '())
  (test "absento 79" (run* (q) (fresh (d) (absento `(3 . 4) q) (== `(3 . ,d) q)
    (== '(3 . 4) d))) '())
  (test "absento 80" (run* (q) (fresh (d a c) (== `(3 . ,d) q) (absento `(3 . ,a) q)
    (== c d) (== `(3 . ,a) c))) '())
  (test "absento 81" (run* (q) (fresh (a b) (absento `(3 . ,a) `(,b . 4))
    (== `(,a . ,b) q)))
    '(((_.0 . _.1) (=/= ((_.0 4) (_.1 3))) (absento ((3 . _.0) _.1)))))
  (test "absento 82" (run* (q) (fresh (d) (== `(3 . ,d) q) (absento `(3 . 4) q)))
    '(((3 . _.0) (=/= ((_.0 4))) (absento ((3 . 4) _.0)))))
  (test "absento 83" (run* (q) (fresh (d) (== `(3 . ,d) q) (== '(3 . 4) d))
    (absento `(3 . 4) q)) '())
  (test "absento 84" (run* (q)  (fresh (a b c d)  (=/= `(,a . ,b) `(,c . ,d))
    (absento a c) (== `(,a ,b ,c ,d) q)))
    '(((_.0 _.1 _.2 _.3) (absento (_.0 _.2)))))
  (test "absento 84 b" (run* (q) (fresh (a b c d)  (=/= `(,a . ,b) `(,c . ,d))
    (absento c a)  (== `(,a ,b ,c ,d) q)))
    '(((_.0 _.1 _.2 _.3) (absento (_.2 _.0)))))
  (test "absento 85 a" (run* (q) (fresh (a b) (=/= a b) (absento a b) (== `(,a ,b) q)))
    '(((_.0 _.1) (absento (_.0 _.1)))))
  (test "absento 85 b" (run* (q) (fresh (a b) (absento a b) (=/= a b) (== `(,a ,b) q)))
    '(((_.0 _.1) (absento (_.0 _.1)))))
  failures
)

(
  "Logic interpreter"
  ()
  (set! failures '())
  (define eval-expo
    (lambda (exp env val)
      (conde
        ((fresh (rator rand x body env^ a)
           (== `(,rator ,rand) exp)
           (eval-expo rator env `(closure ,x ,body ,env^))
           (eval-expo rand env a)
           (eval-expo body `((,x . ,a) . ,env^) val)))
        ((fresh (x body)
           (== `(lambda (,x) ,body) exp)
           (symbolo x)
           (== `(closure ,x ,body ,env) val)
           (not-in-envo 'lambda env)))
        ((symbolo exp) (lookupo exp env val)))))
  (define not-in-envo
    (lambda (x env)
      (conde
        ((== '() env))
        ((fresh (y v rest)
           (== `((,y . ,v) . ,rest) env)
           (=/= y x)
           (not-in-envo x rest))))))
  (define lookupo
    (lambda (x env t)
      (conde
        ((fresh (y v rest)
           (== `((,y . ,v) . ,rest) env) (== y x)
           (== v t)))
        ((fresh (y v rest)
           (== `((,y . ,v) . ,rest) env) (=/= y x)
           (lookupo x rest t))))))
  (test "running backwards"
    (run 5 (q) (eval-expo q '() '(closure y x ((x . (closure z z ()))))))
    '(((lambda (x) (lambda (y) x)) (lambda (z) z))
      ((lambda (x) (x (lambda (y) x))) (lambda (z) z))
      (((lambda (x) (lambda (y) x))
        ((lambda (_.0) _.0) (lambda (z) z)))
       (sym _.0))
      (((lambda (_.0) _.0)
        ((lambda (x) (lambda (y) x)) (lambda (z) z)))
       (sym _.0))
      ((((lambda (_.0) _.0) (lambda (x) (lambda (y) x)))
        (lambda (z) z))
       (sym _.0))))
  (define lookupo
    (lambda (x env t)
      (fresh (rest y v)
        (== `((,y . ,v) . ,rest) env)
        (conde
          ((== y x) (== v t))
          ((=/= y x) (lookupo x rest t))))))
  (test "eval-exp-lc 1"
    (run* (q) (eval-expo '(((lambda (x) (lambda (y) x)) (lambda (z) z))
      (lambda (a) a)) '() q))
    '((closure z z ())))
  (test "eval-exp-lc 2"
    (run* (q) (eval-expo '((lambda (x) (lambda (y) x)) (lambda (z) z)) '() q))
    '((closure y x ((x . (closure z z ()))))))
  (test "running backwards"
    (run 5 (q) (eval-expo q '() '(closure y x ((x . (closure z z ()))))))
    '(((lambda (x) (lambda (y) x)) (lambda (z) z))
      ((lambda (x) (x (lambda (y) x))) (lambda (z) z))
      (((lambda (x) (lambda (y) x))
        ((lambda (_.0) _.0) (lambda (z) z)))
       (sym _.0))
      ((((lambda (_.0) _.0) (lambda (x) (lambda (y) x)))
        (lambda (z) z))
       (sym _.0))
      (((lambda (_.0) _.0)
        ((lambda (x) (lambda (y) x)) (lambda (z) z)))
       (sym _.0))))
  (test "fully-running-backwards"
    (run 5 (q)
      (fresh (e v)
        (eval-expo e '() v)
        (== `(,e ==> ,v) q)))
    '((((lambda (_.0) _.1)
        ==> (closure _.0 _.1 ())) (sym _.0))
      ((((lambda (_.0) _.0) (lambda (_.1) _.2))
        ==>
        (closure _.1 _.2 ()))
       (sym _.0 _.1))
      ((((lambda (_.0) (lambda (_.1) _.2)) (lambda (_.3) _.4))
        ==>
        (closure _.1 _.2 ((_.0 . (closure _.3 _.4 ())))))
       (=/= ((_.0 lambda)))
       (sym _.0 _.1 _.3))
      ((((lambda (_.0) (_.0 _.0)) (lambda (_.1) _.1))
        ==>
        (closure _.1 _.1 ()))
       (sym _.0 _.1))
      ((((lambda (_.0) (_.0 _.0))
         (lambda (_.1) (lambda (_.2) _.3)))
        ==>
        (closure _.2 _.3 ((_.1 . (closure _.1 (lambda (_.2) _.3) ())))))
       (=/= ((_.1 lambda)))
       (sym _.0 _.1 _.2))))
  failures
)
