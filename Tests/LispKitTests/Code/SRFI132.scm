;;; SRFI132.scm
;;; Regression test data
;;;
;;; Author: Matthias Zenger
;;; Copyright Â© 2017 ObjectHub. All rights reserved.
;;;
;;; Licensed under the Apache License, Version 2.0 (the "License");
;;; you may not use this file except in compliance with the License.
;;; You may obtain a copy of the License at
;;;
;;;      http://www.apache.org/licenses/LICENSE-2.0
;;;
;;; Unless required by applicable law or agreed to in writing, software
;;; distributed under the License is distributed on an "AS IS" BASIS,
;;; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
;;; See the License for the specific language governing permissions and
;;; limitations under the License.

(
  "Sort list"
  (3 16 20 38 47 60 68 73 108 124 165 283 293 321 321 361 391 441 496 541 546
   547 550 561 613 623 631 643 643 652 658 719 733 740 771 783 813 817 817 818
   835 840 857 888 898 905 962 973 997 999)
  (define xu '(840 108 999 818 165 857 817 124 740 905 783 888 547 496 997 73 321 283 20
               60 361 293 813 658 962 631 623 391 561 733 613 38 973 898 835 652 16 541
               817 550 3 68 321 441 47 643 643 546 719 771))
  (import (srfi 132))
  (list-sort < xu)
)

(
  "Sort sorted list"
  (3 16 20 38 47 60 68 73 108 124 165 283 293 321 321 361 391 441 496 541 546
   547 550 561 613 623 631 643 643 652 658 719 733 740 771 783 813 817 817 818
   835 840 857 888 898 905 962 973 997 999)
  (define xs '(3 16 20 38 47 60 68 73 108 124 165 283 293 321 321 361 391 441 496 541 546
               547 550 561 613 623 631 643 643 652 658 719 733 740 771 783 813 817 817 818
               835 840 857 888 898 905 962 973 997 999))
  (list-sort < xs)
)

(
  "Sort short lists"
  (() (9) (3 9) (3 9))
  (list (list-sort < '()) (list-sort < '(9)) (list-sort < '(9 3)) (list-sort < '(3 9)))
)

(
  "Stable sort list"
  (0 1 1 1 -1 3 -4 -5 -7 -7 -10 10 13 -13 -14 16 21 -23 24 28 30 -31 31 31 33 36 -37 37 -39
   -40 41 -41 -43 43 -44 46 -46 50)
  (define (a< x y) (< (abs x) (abs y)))
  (define x '(0 46 -46 -43 -4 -10 33 3 -40 10 -31 1 41 13 -37 31 -44 30 -5 -39 -41 -14 -13
              43 -23 37 1 31 -7 1 28 36 -1 16 24 50 21 -7))
  (list-stable-sort a< x)
)

(
  "Lists sorted"
  (#t #t #f #t #f #t)
  (define xu '(840 108 999 999 999 857 817 124 740 905 783 888 547 496 997 73 321 283 20
               60 361 293 813 658 962 631 623 391 561 733 613 38 973 898 835 652 16 541
               817 550 3 68 321 441 47 643 643 546 719 771))
  (define xs '(2 16 20 38 49 60 68 73 108 124 165 283 293 321 321 361 391 441 496 541 546
               547 550 561 613 623 631 643 658 658 658 719 733 740 771 783 813 817 817 818
               835 840 857 888 898 905 962 973 997 999))
  (list (list-sorted? < '()) (list-sorted? < '(9)) (list-sorted? < '(9 3))
        (list-sorted? < '(3 9)) (list-sorted? < xu) (list-sorted? < xs))
)

(
  "Merge lists"
  (3 6 6 7 8 14 15 16 19 23 27 27 27 31 32 33 34 36 36 41 42 43 44 45 46 47 49
   50 53 54 54 55 55 55 57 59 60 66 68 69 72 72 73 73 73 74 75 79 83 87 91 93 98)
  (define fst '(8 14 15 19 27 34 36 41 43 45 46 50 55 55 59 66 72 73 73 75 91))
  (define snd '(3 6 6 7 16 23 27 27 31 32 33 36 42 44 47 49 53 54 54 55 57 60 68 69 72 73
                74 79 83 87 93 98))
  (list-merge < fst snd)
)

(
  "Delete neighbor dups in list"
  (1 2 7 0 -2)
  (list-delete-neighbor-dups = '(1 1 2 7 7 7 0 -2 -2))
)

(
  "Sort vector"
  #(3 16 20 38 47 60 68 73 108 124 165 283 293 321 321 361 391 441 496 541 546
    547 550 561 613 623 631 643 643 652 658 719 733 740 771 783 813 817 817 818
    835 840 857 888 898 905 962 973 997 999)
  (define xu #(840 108 999 818 165 857 817 124 740 905 783 888 547 496 997 73 321 283 20
               60 361 293 813 658 962 631 623 391 561 733 613 38 973 898 835 652 16 541
               817 550 3 68 321 441 47 643 643 546 719 771))
  (vector-sort < xu)
)

(
  "Sort vector in place"
  #(3 16 20 38 47 60 68 73 108 124 165 283 293 321 321 361 391 441 496 541 546
    547 550 561 613 623 631 643 643 652 658 719 733 740 771 783 813 817 817 818
    835 840 857 888 898 905 962 973 997 999)
  (define xu (vector 840 108 999 818 165 857 817 124 740 905 783 888 547 496 997 73 321 283 20
                     60 361 293 813 658 962 631 623 391 561 733 613 38 973 898 835 652 16 541
                     817 550 3 68 321 441 47 643 643 546 719 771))
  (vector-sort! < xu)
  xu
)

(
  "Sort sorted vector"
  #(3 16 20 38 47 60 68 73 108 124 165 283 293 321 321 361 391 441 496 541 546
    547 550 561 613 623 631 643 643 652 658 719 733 740 771 783 813 817 817 818
    835 840 857 888 898 905 962 973 997 999)
  (define xs #(3 16 20 38 47 60 68 73 108 124 165 283 293 321 321 361 391 441 496 541 546
               547 550 561 613 623 631 643 643 652 658 719 733 740 771 783 813 817 817 818
               835 840 857 888 898 905 962 973 997 999))
  (vector-sort < xs)
)

(
  "Sort short vectors"
  (#() #(9) #(3 9) #(3 9))
  (list (vector-sort < #()) (vector-sort < #(9)) (vector-sort < #(9 3))
        (vector-sort < #(3 9)))
)

(
  "Stable sort vector"
  #(0 1 1 1 -1 3 -4 -5 -7 -7 -10 10 13 -13 -14 16 21 -23 24 28 30 -31 31 31 33 36 -37 37 -39
    -40 41 -41 -43 43 -44 46 -46 50)
  (define (a< x y) (< (abs x) (abs y)))
  (define x #(0 46 -46 -43 -4 -10 33 3 -40 10 -31 1 41 13 -37 31 -44 30 -5 -39 -41 -14 -13
              43 -23 37 1 31 -7 1 28 36 -1 16 24 50 21 -7))
  (vector-stable-sort a< x)
)

(
  "Stable sort vector in place"
  #(0 1 1 1 -1 3 -4 -5 -7 -7 -10 10 13 -13 -14 16 21 -23 24 28 30 -31 31 31 33 36 -37 37 -39
    -40 41 -41 -43 43 -44 46 -46 50)
  (define (a< x y) (< (abs x) (abs y)))
  (define x (vector 0 46 -46 -43 -4 -10 33 3 -40 10 -31 1 41 13 -37 31 -44 30 -5 -39 -41 -14 -13
                    43 -23 37 1 31 -7 1 28 36 -1 16 24 50 21 -7))
  (vector-stable-sort! a< x)
  x
)

(
  "Vector sorted"
  (#t #t #f #t #f #t)
  (define xu #(840 108 999 999 999 857 817 124 740 905 783 888 547 496 997 73 321 283 20
               60 361 293 813 658 962 631 623 391 561 733 613 38 973 898 835 652 16 541
               817 550 3 68 321 441 47 643 643 546 719 771))
  (define xs #(2 16 20 38 49 60 68 73 108 124 165 283 293 321 321 361 391 441 496 541 546
               547 550 561 613 623 631 643 658 658 658 719 733 740 771 783 813 817 817 818
               835 840 857 888 898 905 962 973 997 999))
  (list (vector-sorted? < #()) (vector-sorted? < #(9)) (vector-sorted? < #(9 3))
        (vector-sorted? < #(3 9)) (vector-sorted? < xu) (vector-sorted? < xs))
)

(
  "Merge vectors"
  #(3 6 6 7 8 14 15 16 19 23 27 27 27 31 32 33 34 36 36 41 42 43 44 45 46 47 49
    50 53 54 54 55 55 55 57 59 60 66 68 69 72 72 73 73 73 74 75 79 83 87 91 93 98)
  (define fst #(8 14 15 19 27 34 36 41 43 45 46 50 55 55 59 66 72 73 73 75 91))
  (define snd #(3 6 6 7 16 23 27 27 31 32 33 36 42 44 47 49 53 54 54 55 57 60 68 69 72 73
                74 79 83 87 93 98))
  (vector-merge < fst snd)
)

(
  "Merge vectors in place"
  #(0 1 3 6 6 7 8 14 15 16 19 23 27 27 27 31 32 33 34 36 36 41 42 43 44 45 46 47 49
    50 53 54 54 55 55 55 57 59 60 66 68 69 72 72 73 73 73 74 75 79 83 87 91 93 98 2 3)
  (define fst #(8 14 15 19 27 34 36 41 43 45 46 50 55 55 59 66 72 73 73 75 91))
  (define snd #(3 6 6 7 16 23 27 27 31 32 33 36 42 44 47 49 53 54 54 55 57 60 68 69 72 73
                74 79 83 87 93 98))
  (define trd (vector 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0
                      0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 3))
  (vector-merge! < trd fst snd 2)
  trd
)

(
  "Delete neighbor dups in vector"
  (#(1 2 7 0 -2) #(7 0 -2) 9 #(0 0 0 1 2 3 4 5 6 4 4 5 5 6 6))
  (define v (vector 0 0 0 1 1 2 2 3 3 4 4 5 5 6 6))
  (list (vector-delete-neighbor-dups = '#(1 1 2 7 7 7 0 -2 -2))
        (vector-delete-neighbor-dups = '#(1 1 2 7 7 7 0 -2 -2) 3 8)
        (vector-delete-neighbor-dups! = v 3)
        v)
)
